package main

import (
	"fmt"
	"os"
	"path/filepath"
	"time"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run src/cmd/migrate/create/main.go <migration_name>")
		fmt.Println("Example: go run src/cmd/migrate/create/main.go create_users_table")
		os.Exit(1)
	}

	migrationsDir, err := getMigrationsDir()
	if err != nil {
		fmt.Printf("Error locating migrations directory: %v\n", err)
		os.Exit(1)
	}

	if err := os.MkdirAll(migrationsDir, 0755); err != nil {
		fmt.Printf("Error creating migrations directory: %v\n", err)
		os.Exit(1)
	}

	name := os.Args[1]
	timestamp := time.Now().Format("20060102150405")

	for _, suffix := range []string{"up", "down"} {
		filename := filepath.Join(migrationsDir, fmt.Sprintf("%s_%s.%s.sql", timestamp, name, suffix))
		if err := createMigrationFile(filename); err != nil {
			fmt.Printf("Error creating migration: %v\n", err)
			os.Exit(1)
		}
		fmt.Printf("Successfully created: %s\n", filename)
	}
}

func createMigrationFile(filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()
	_, err = file.WriteString("-- Migration file generated by GoZen\n\n")
	return err
}

func getMigrationsDir() (string, error) {
	// Start from current working directory
	wd, err := os.Getwd()
	if err != nil {
		return "", fmt.Errorf("failed to get working directory: %w", err)
	}

	// Walk up the directory tree to find go.mod
	current := wd
	for {
		if _, err := os.Stat(filepath.Join(current, "go.mod")); err == nil {
			// Found project root, return src/migrations
			return filepath.Join(current, "src", "migrations"), nil
		}
		parent := filepath.Dir(current)
		if parent == current {
			// Reached filesystem root
			break
		}
		current = parent
	}

	// Fallback: if we're already in src directory, use migrations subdirectory
	if filepath.Base(wd) == "src" {
		return filepath.Join(wd, "migrations"), nil
	}

	return "", fmt.Errorf("could not locate project root (go.mod not found in any parent directory)")
}